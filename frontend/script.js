const tg = window.Telegram.WebApp;
let userId = null;
let balance = 0;
let inventory = [];
let coinsInterval = null;
let lastActiveTime = Date.now();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    try {
        tg.ready();
        tg.expand();
        
        userId = tg.initDataUnsafe?.user?.id;
        if (!userId) {
            tg.showAlert("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
            return;
        }

        await loadUserData();
        setupEventListeners();
        startCoinTimer();
        
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", e);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserData() {
    try {
        const response = await fetch(`https://–≤–∞—à-–±–µ–∫–µ–Ω–¥.herokuapp.com/get_user?user_id=${userId}`);
        const data = await response.json();
        
        balance = data.balance || 0;
        inventory = data.inventory || [];
        lastActiveTime = data.last_active || Date.now();
        
        updateUI();
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
    }
}

// –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
function startCoinTimer() {
    if (coinsInterval) clearInterval(coinsInterval);
    
    coinsInterval = setInterval(async () => {
        if (!document.hidden) {
            const now = Date.now();
            const secondsActive = Math.floor((now - lastActiveTime) / 1000);
            
            if (secondsActive > 0) {
                balance += secondsActive;
                lastActiveTime = now;
                updateUI();
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∫–∞–∂–¥—ã–µ 10 –æ—á–∫–æ–≤
                if (balance % 10 === 0) {
                    await saveToServer();
                }
            }
        }
    }, 1000);
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
async function openCase() {
    if (balance < 100) {
        tg.showAlert("‚ùå –ù—É–∂–Ω–æ 100 –æ—á–∫–æ–≤!");
        return;
    }

    try {
        const response = await fetch("https://–≤–∞—à-–±–µ–∫–µ–Ω–¥.herokuapp.com/open_case", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: userId })
        });
        
        const result = await response.json();
        
        if (result.success) {
            balance -= 100;
            inventory.push(result.item);
            await saveToServer();
            updateUI();
            tg.showAlert(`üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏: ${result.item}!`);
        } else {
            tg.showAlert(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${result.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
        }
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:", e);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
function showInventory() {
    const inventoryDiv = document.getElementById("inventory");
    inventoryDiv.innerHTML = `
        <h3>–í–∞—à–∏ –ø—Ä–µ–¥–º–µ—Ç—ã (${inventory.length}):</h3>
        ${inventory.map(item => `<div class="item">${item}</div>`).join("")}
    `;
    inventoryDiv.classList.toggle("hidden");
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function saveToServer() {
    try {
        await fetch("https://–≤–∞—à-–±–µ–∫–µ–Ω–¥.herokuapp.com/save_data", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                user_id: userId,
                balance: balance,
                inventory: inventory,
                last_active: lastActiveTime
            })
        });
    } catch (e) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    tg.onEvent('viewportChanged', (event) => {
        if (!event.isStateStable) {
            saveToServer();
        }
    });

    // –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏
    window.addEventListener('beforeunload', () => {
        saveToServer();
        if (coinsInterval) clearInterval(coinsInterval);
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateUI() {
    document.getElementById("balance").textContent = balance;
    document.querySelector(".btn-case").textContent = 
        `üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (${balance}/100)`;
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener("DOMContentLoaded", initApp);