// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const ITEMS = [
    {id: 1, name: "Common Skin", rarity: "common", priceVC: 5, ico: "üõ°Ô∏è", desc: "–û–±—ã—á–Ω—ã–π —Å–∫–∏–Ω"},
    {id: 2, name: "Rare Skin", rarity: "rare", priceVC: 15, ico: "üîÆ", desc: "–†–µ–¥–∫–∏–π —Å–∫–∏–Ω"},
    {id: 3, name: "Epic Skin", rarity: "epic", priceVC: 30, ico: "üé≠", desc: "–≠–ø–∏—á–µ—Å–∫–∏–π —Å–∫–∏–Ω"},
    {id: 4, name: "Legendary Skin", rarity: "legendary", priceVC: 100, ico: "üëë", desc: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å–∫–∏–Ω"},
    {id: 5, name: "NFT Art", rarity: "nft", priceVC: 500, ico: "üñºÔ∏è", desc: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π NFT –∞—Ä—Ç"}
];

const RARITY_CHANCES = [
    {rarity: "nft", chance: 0.5},
    {rarity: "legendary", chance: 1.5},
    {rarity: "epic", chance: 8},
    {rarity: "rare", chance: 20},
    {rarity: "common", chance: 70}
];

const RARITY_COLOR = {
    common: "#b9c8f9",
    rare: "#38ffda",
    epic: "#bc78ff",
    legendary: "#ffd700",
    nft: "#00ffd0"
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let inventory = [];
let balancePoints = 0;
let balanceCoins = 0;
let caseDropsHistory = [];
const USER_ID = "user_" + Math.random().toString(36).substr(2, 9);

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function apiGetUser() {
    const res = await fetch(`/get_user?user_id=${USER_ID}`);
    if (!res.ok) throw new Error("Failed to fetch user");
    return await res.json();
}

async function apiSaveUser() {
    const res = await fetch('/save_data', {
        method: "POST",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            user_id: USER_ID,
            balance: balancePoints,
            vcBalance: balanceCoins,
            inventory: inventory,
            last_active: Math.floor(Date.now()/1000)
        })
    });
    if (!res.ok) throw new Error("Failed to save user");
    return await res.json();
}

async function apiOpenCase(itemIdx) {
    const res = await fetch('/open_case', {
        method: "POST",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            user_id: USER_ID,
            item_idx: itemIdx
        })
    });
    if (!res.ok) throw new Error("Failed to open case");
    return await res.json();
}

async function apiSellItem(idx) {
    const res = await fetch('/sell_item', {
        method: "POST",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            user_id: USER_ID,
            item_idx: idx
        })
    });
    if (!res.ok) throw new Error("Failed to sell item");
    return await res.json();
}

async function apiTop() {
    const res = await fetch('/top_users');
    if (!res.ok) throw new Error("Failed to fetch top");
    return await res.json();
}

async function apiGetCaseHistory() {
    const res = await fetch(`/get_case_history?user_id=${USER_ID}`);
    if (!res.ok) throw new Error("Failed to fetch case history");
    return await res.json();
}

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const panels = {
    inventory: document.getElementById('panel-inventory'),
    opencase: document.getElementById('panel-opencase'),
    addpoint: document.getElementById('panel-addpoint'),
    topplayers: document.getElementById('panel-topplayers'),
    upgrade: document.getElementById('panel-upgrade')
};

const sidebarBtns = document.querySelectorAll('.grok-sidebtn');
const caseModal = document.getElementById('case-modal');
const rouletteStrip = document.getElementById('roulette-strip');
const spinBtn = document.getElementById('spin-btn');
const caseResult = document.getElementById('case-result');
const closeCaseBtn = document.getElementById('close-case-btn');
const balancePointsEl = document.getElementById('balancePoints');
const balanceCoinsEl = document.getElementById('balanceCoins');

// –§—É–Ω–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
function updateBalances() {
    balancePointsEl.textContent = balancePoints;
    balanceCoinsEl.textContent = balanceCoins;
    document.querySelectorAll('#balancePoints2, .balance-points').forEach(el => el.textContent = balancePoints);
    document.querySelectorAll('#balanceCoins2, .balance-coins').forEach(el => el.textContent = balanceCoins);
}

async function renderInventory() {
    let html = '<div class="grok-menu-list"></div>';
    
    if (inventory.length === 0) {
        html += `
            <div class="grok-inventory-empty">
                –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤<br>
                <div style="opacity:.7;font-size:.97em;margin-top:1.1em;">
                    –ü–æ–¥—Å–∫–∞–∑–∫–∞: –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã!
                </div>
            </div>
        `;
    } else {
        html += `<div class="grok-inventory-grid">`;
        
        inventory.forEach((item, index) => {
            html += `
                <div class="grok-item-card">
                    <div class="grok-item-ico">${item.ico}</div>
                    <div class="grok-item-name">${item.name}</div>
                    <div class="grok-item-desc">${item.desc}</div>
                    <div class="grok-item-rarity" style="color: ${RARITY_COLOR[item.rarity]}">
                        ${item.rarity.toUpperCase()}
                    </div>
                    <button class="grok-item-sell" data-idx="${index}">
                        –ü—Ä–æ–¥–∞—Ç—å –∑–∞ ${item.priceVC} VC
                    </button>
                </div>
            `;
        });
        
        html += `</div>`;
    }
    
    panels.inventory.innerHTML = html;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–æ–¥–∞–∂–∏
    document.querySelectorAll('.grok-item-sell').forEach(btn => {
        btn.addEventListener('click', async () => {
            const idx = parseInt(btn.getAttribute('data-idx'));
            try {
                const result = await apiSellItem(idx);
                if (result.success) {
                    balanceCoins = result.vcBalance;
                    inventory.splice(idx, 1);
                    updateBalances();
                    await renderInventory();
                    await apiSaveUser();
                }
            } catch (error) {
                console.error("Error selling item:", error);
                alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞");
            }
        });
    });
}

async function renderCase() {
    panels.opencase.innerHTML = `
        <div class="grok-case-header">
            <h3>–û—Ç–∫—Ä–æ–π –∫–µ–π—Å!</h3>
            <div class="grok-case-rates">
                NFT: 0.5% | –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π: 1.5% | –≠–ø–∏—á–µ—Å–∫–∏–π: 8% | –†–µ–¥–∫–∏–π: 20% | –û–±—ã—á–Ω—ã–π: 70%
            </div>
        </div>
        <button class="grok-case-btn" id="open-case-btn">
            –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å<br>
            <span>100 –æ—á–∫–æ–≤ / 10 VC</span>
        </button>
        <div class="grok-balance-display">
            <span>–û—á–∫–∏: <span id="balancePoints2">${balancePoints}</span></span>
            <span>VC: <span id="balanceCoins2">${balanceCoins}</span></span>
        </div>
        <div class="grok-case-history">
            <h4>–ò—Å—Ç–æ—Ä–∏—è:</h4>
            <div id="case-history-items"></div>
        </div>
    `;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    const historyItems = caseDropsHistory.map(item => `
        <div class="grok-history-item" style="color: ${RARITY_COLOR[item.rarity]}">
            ${item.name}
        </div>
    `).join('');
    
    document.getElementById('case-history-items').innerHTML = 
        historyItems.length ? historyItems : '<div>–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏</div>';
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    document.getElementById('open-case-btn').addEventListener('click', async () => {
        if (balancePoints >= 100) {
            balancePoints -= 100;
        } else if (balanceCoins >= 10) {
            balanceCoins -= 10;
        } else {
            alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!");
            return;
        }
        
        updateBalances();
        await apiSaveUser();
        showCaseModal();
    });
}

function showCaseModal() {
    caseModal.classList.add('active');
    drawRoulette();
    caseResult.innerHTML = '';
}

function drawRoulette() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 30 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ —à–∞–Ω—Å–∞–º
    const items = [];
    for (let i = 0; i < 30; i++) {
        const roll = Math.random() * 100;
        let rarity;
        
        if (roll < 0.5) rarity = "nft";
        else if (roll < 2) rarity = "legendary";
        else if (roll < 10) rarity = "epic";
        else if (roll < 30) rarity = "rare";
        else rarity = "common";
        
        const pool = ITEMS.filter(item => item.rarity === rarity);
        items.push(pool[Math.floor(Math.random() * pool.length)]);
    }
    
    // –ü–æ–±–µ–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç (–≤—Å–µ–≥–¥–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π)
    const winnerIdx = Math.floor(items.length / 2);
    const winnerItem = items[winnerIdx];
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —Ä—É–ª–µ—Ç–∫—É
    rouletteStrip.innerHTML = items.map((item, index) => `
        <div class="roulette-item ${index === winnerIdx ? 'winner' : ''}" 
             style="color: ${RARITY_COLOR[item.rarity]}"
             data-idx="${index}">
            <div class="roulette-item-icon">${item.ico}</div>
            <div class="roulette-item-name">${item.name}</div>
        </div>
    `).join('');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    rouletteStrip.style.transition = 'none';
    rouletteStrip.style.transform = 'translateX(0)';
    setTimeout(() => {
        rouletteStrip.style.transition = '';
    }, 10);
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ä–∞—â–µ–Ω–∏—è
    spinBtn.disabled = false;
    spinBtn.onclick = () => spinRoulette(items, winnerIdx);
}

function spinRoulette(items, winnerIdx) {
    spinBtn.disabled = true;
    caseResult.innerHTML = '';
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–ø–æ–±–µ–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É)
    const itemWidth = 120; // –®–∏—Ä–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏
    const visibleItems = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const offset = (visibleItems * itemWidth) / 2 - itemWidth / 2;
    const targetX = -(winnerIdx * itemWidth) + offset;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    rouletteStrip.style.transition = 'transform 3s cubic-bezier(0.2, 0.8, 0.3, 1)';
    rouletteStrip.style.transform = `translateX(${targetX}px)`;
    
    // –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(async () => {
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        const winnerElement = rouletteStrip.children[winnerIdx];
        winnerElement.classList.add('highlight');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        const winnerItem = items[winnerIdx];
        inventory.push(winnerItem);
        caseDropsHistory.unshift({
            name: winnerItem.name,
            rarity: winnerItem.rarity,
            timestamp: Math.floor(Date.now()/1000)
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        caseResult.innerHTML = `
            <div class="case-result-title">–í–∞–º –≤—ã–ø–∞–ª–æ:</div>
            <div class="case-result-item" style="color: ${RARITY_COLOR[winnerItem.rarity]}">
                ${winnerItem.ico} ${winnerItem.name}
            </div>
            <div class="case-result-desc">${winnerItem.desc}</div>
        `;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await apiSaveUser();
        updateBalances();
        renderInventory();
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–Ω–æ–≤–∞ –∫—Ä—É—Ç–∏—Ç—å
        setTimeout(() => {
            spinBtn.disabled = false;
            winnerElement.classList.remove('highlight');
        }, 3000);
    }, 3000);
}

async function renderTop() {
    try {
        const topPlayers = await apiTop();
        
        let html = `
            <div class="grok-leaderboard">
                <div class="grok-leaderboard-header">–¢–û–ü –ò–ì–†–û–ö–û–í</div>
                <div class="grok-leaderboard-list">
        `;
        
        if (topPlayers.length === 0) {
            html += `<div class="grok-no-players">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö</div>`;
        } else {
            topPlayers.forEach((player, index) => {
                html += `
                    <div class="grok-leaderboard-item">
                        <div class="grok-leaderboard-rank">${index + 1}</div>
                        <div class="grok-leaderboard-avatar">
                            ${player.photo_url ? 
                                `<img src="${player.photo_url}" alt="${player.username}">` : 
                                'üë§'}
                        </div>
                        <div class="grok-leaderboard-info">
                            <div class="grok-leaderboard-name">
                                ${player.username || player.first_name || '–ê–Ω–æ–Ω–∏–º'}
                            </div>
                            <div class="grok-leaderboard-stats">
                                <span>${player.balance} –æ—á–∫–æ–≤</span>
                                <span>${player.vcBalance} VC</span>
                                <span>LVL ${player.level}</span>
                            </div>
                        </div>
                    </div>
                `;
            });
        }
        
        html += `
                </div>
            </div>
            <div class="grok-leaderboard-footer">
                –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}
            </div>
        `;
        
        panels.topplayers.innerHTML = html;
    } catch (error) {
        console.error("Error loading top players:", error);
        panels.topplayers.innerHTML = `
            <div class="grok-error">
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.
            </div>
        `;
    }
}

async function renderAddPoint() {
    panels.addpoint.innerHTML = `
        <div class="grok-addpoint-container">
            <div class="grok-addpoint-header">
                <h3>–§–∞—Ä–º –æ—á–∫–æ–≤</h3>
                <div class="grok-addpoint-balance">
                    –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <span id="current-points">${balancePoints}</span>
                </div>
            </div>
            <button class="grok-addpoint-btn" id="start-farming-btn">
                +1 –æ—á–∫–æ –≤ —Å–µ–∫—É–Ω–¥—É
            </button>
            <div class="grok-addpoint-info">
                –û—á–∫–∏ –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è
            </div>
        </div>
    `;
    
    document.getElementById('start-farming-btn').addEventListener('click', () => {
        const btn = document.getElementById('start-farming-btn');
        btn.disabled = true;
        btn.textContent = "–§–∞—Ä–º–∏–º...";
        
        const interval = setInterval(async () => {
            balancePoints++;
            document.getElementById('current-points').textContent = balancePoints;
            updateBalances();
            
            // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if (balancePoints % 10 === 0) {
                await apiSaveUser();
            }
        }, 1000);
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const stopFarming = () => {
            clearInterval(interval);
            btn.disabled = false;
            btn.textContent = "+1 –æ—á–∫–æ –≤ —Å–µ–∫—É–Ω–¥—É";
            document.removeEventListener('pageChanged', stopFarming);
        };
        
        document.addEventListener('pageChanged', stopFarming);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function loadUserData() {
    try {
        const userData = await apiGetUser();
        balancePoints = userData.balance;
        balanceCoins = userData.vcBalance;
        inventory = userData.inventory || [];
        
        const historyData = await apiGetCaseHistory();
        caseDropsHistory = historyData.map(item => ({
            name: item.name,
            rarity: item.rarity,
            timestamp: item.timestamp
        }));
        
        updateBalances();
    } catch (error) {
        console.error("Error loading user data:", error);
        alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
sidebarBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        sidebarBtns.forEach(b => b.classList.remove('active'));
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–π
        btn.classList.add('active');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–Ω–µ–ª–∏
        Object.values(panels).forEach(p => p.classList.remove('active'));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –ø–∞–Ω–µ–ª—å
        const page = btn.dataset.page;
        panels[page].classList.add('active');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.dispatchEvent(new CustomEvent('pageChanged'));
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        switch (page) {
            case 'inventory':
                renderInventory();
                break;
            case 'opencase':
                renderCase();
                break;
            case 'addpoint':
                renderAddPoint();
                break;
            case 'topplayers':
                renderTop();
                break;
            case 'upgrade':
                // renderUpgrade();
                break;
        }
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
closeCaseBtn.addEventListener('click', () => {
    caseModal.classList.remove('active');
});

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
setInterval(async () => {
    try {
        await apiSaveUser();
        console.log('–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }
}, 30000);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
window.addEventListener('load', async () => {
    await loadUserData();
    sidebarBtns[0].click(); // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
});